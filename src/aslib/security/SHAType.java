package aslib.security;

import java.util.Optional;

/**
 * <p> Contains the hash options with their names and unique lengths. </p>
 *
 * <h2> Names and lengths </h2>
 *
 * <table style="width:120px" summary="">
 *  <tr>
 *      <th> Name </th>
 *      <th> Length </th>
 *  </tr>
 *  <tr>
 *      <td> MD5 </td>
 *      <td> 32 </td>
 *  </tr>
 *  <tr>
 *      <td> SHA-1 </td>
 *      <td> 40 </td>
 *  </tr>
 *  <tr>
 *      <td> SHA-224 </td>
 *      <td> 56 </td>
 *  </tr>
 *  <tr>
 *      <td> SHA-256 </td>
 *      <td> 64 </td>
 *  </tr>
 *  <tr>
 *      <td> SHA-384 </td>
 *      <td> 96 </td>
 *  </tr>
 *  <tr>
 *      <td> SHA-512 </td>
 *      <td> 128 </td>
 *  </tr>
 * </table>
 *
 * @author Adriano Siqueira
 * @version 3.1.0
 * @since 6.1
 */
public enum SHAType {
    MD5("MD5", 32),
    SHA1("SHA-1", 40),
    SHA224("SHA-224", 56),
    SHA256("SHA-256", 64),
    SHA384("SHA-384", 96),
    SHA512("SHA-512", 128);

    private final String name;
    private final int    length;

    SHAType(String name, int length) {
        this.name   = name;
        this.length = length;
    }

    /**
     * <p> Every hash name has a unique length of bytes that are generated.
     * It works like a finger print, so it is possible to use that length value
     * to search by an name. </p>
     *
     * <p> Retrieves an algorithm by it's unique hash length. </p>
     *
     * <p> This method returns an {@link Optional} containing the algorithm
     * that matches the length. If the length is not found, then the optional
     * will be empty. </p>
     *
     * @param length The length of the hash to search.
     *
     * @return An {@link Optional} containing the result.
     *
     * @since 1.0.0
     */
    public static Optional<SHAType> getByLength(int length) {
        for (SHAType value : values()) {
            if (value.length == length) {
                return Optional.of(value);
            }
        }

        return Optional.empty();
    }

    /**
     * Gets the name of the algorithm.
     *
     * @return The name of the algorithm.
     */
    public String getName() {
        return name;
    }

    /**
     * Gets the length of the hash that is generated by this algorithm.
     *
     * @return The length of the hash.
     */
    public int getLength() {
        return length;
    }
}